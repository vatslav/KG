<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        5/8JvPz/Ab3//wC7//8Auv3/ALf57AGt6aYIgKs/GwkIExsaHQ8dHB8IHh0hAgGj4AAAAAAAGrXunBPB
        //8NtPL/DTKc/zIsvv/U1PP//////9PS5/+wr9P/Z2W3/5+d0//w7/D/7Ozv/73I4/9nh7b/U1BJ/3pw
        Z/9zcnT/Rlli/ylrhf8fm8n/ELj2/wK9//8AvP//ALz//wC5+tUGms0+IgAACh0cIAgeHSECAZ/bAACG
        wwYYtO62H8T//yHH//8Ye8T/ISKs/42I5f/z8v7//////+Hg9f+4t+f/1dTo/5mYzf/f3uv/zNHi/2hm
        i/97cHj/lJSU/0RERf8dGxz/IB0e/yswM/9EZmv/Ua/N/ya+9f4Jvf3/ALz//wC6+7YGlMURLQAAAR8e
        IgABm9YAAI7JDBq07ccwyf//NMv//zPG+v8mfsv/Jj62/2pq0f/Rz/X/9fT//+vq9/9vbb3/b22j/8TD
        yP+Qpcf/XllD/5SNhf97enz/IyMk/yYlJ/80NDb/RTkq/4BfJP+ujEz/prq7z1LE750wwPXkE7779ge9
        /kwGvf0ARsj3AAKX0AAAjscSFbLs0S3I//8/zf//R9D//0rR//9CvPD/Up7Z/3OIy/95edX/urf3/7y7
        5v+xsbL/n56e/3mEmv95aU3/gHx5/2RkZf8yMjP/MzIz/zg4Of9KQTX/lHdC/7mLMv+mk3THx66hGJ7V
        6yxxzO6FWcrzWHLN7wBd0/0AApLLAACJwRMZsurTNMr//y3I//8wyf//Pcz//0nQ//+D4v//j9j1/113
        wv+Gguf/sq/6/9PS5/+3t7b/lJST/4t5X//Gwr7/nZ2e/2BfYP9JSEn/RENE/0xLS/9nXU//f2I1/5SC
        Z9mPZyp7rnAABv///w3///4j///+ALLo/AACjsUAAIG5Eheu59A9zP//Pc3//zPK//8qx///KMf//3zd
        //933v//ZK3m/4OD2v+xrvn/u7n6/9PR4v+zsbP/oZuT/8fDvv/Hx8j/j4+P/3Fxcf9bW1v/XVxc/1lZ
        Wv+Id13/0cGopJ11NJnCmksq////Bv///yP///8A////AAKJwAAAdaoMEqnixTHJ//80yv//MMn//yzI
        //85y///lOP//4Tf//920Pv/fo3f/7q38v/Fwfr/pLTr/4Wrv/+1tbT/vby8/+Dg4P/Dw8P/nJyc/3t7
        e/9hYWD/k5OT/8OylvjZxqVmuZVVndy/hEz///8V////JP///wH///8AA4W7AABRgQUOotqyJsX9/yrI
        //8mxv//IsX//yLF//9Dzv//Y9b//3zd//+JvPX/pqfo/6277P91wvH/Yc70/460wf/Bv77/zczM/+zr
        6f/Z2Nj/rKuq/8/My//v7+/w0byb1Nm9hoLWsWay9ObJQv///yr///8p////AP///wAEgrYAWfH/ABOS
        y5Ajt/T/H8X//xnG//8WxP//E8L//w7A//8Lv///EcH//ybG//9KxPz/bND6/37d//9/3v//eNLx/6C6
        w//Jx8b/zsm9/9PUxf+6w7r/t93i/53c8L3QtYG27Mh63PDXonT///86////Ov///yz///8A////AAR7
        rgCEP58Ab0afX3pTrP5iccP/QpLb/yWs8P8Pufv/BL///wG///8Avf//ALz//wC8//8Dvf//F8L//znL
        //9f1v//ftHu/7bHzf/R0c//nMTO/3rO6P9r1fn/gdz9vtvBjsD13qub////UP///03///9L////K///
        /wD///8AAAAAAJAnmQCRJ5omlDGg4ZMtmf+cRqT/m2a1/3lrvP9Rfc3/LZji/xOu8/8Ju/3/CL///wvA
        //8OwP//D8D//xXC//8lx///RL/p/46nr//L0NH/otTm/5He+f+h5PvN5NOxsPv05nj///9j////YP//
        /17///8m////AAAAAAAAAAAAhCa9AHAOzwKKMb95jzOu4ZdCt/miVcH/oE68/6VWu/+eWLr/hlW6/2Ns
        ye8UpObXD7Xx9Bu++P8oxv7/Msr//zjM//86zP//O6TJ/4OSlv+1u73/gcTb/5Dd+Nb19/V////+gP//
        /3z///92////a////xj///8AAAAAAAAAAAAAAAAAjSmeAIUkrgWSMZ0gkDSsTo42voiMOMm/kULS6JVK
        1v2ZTdT/kj7MuiBgtB0Bib8/BpLJeA2f17MaruXhLr3x+kPK+v9U0///U6S//5GYmf+huL//Vrzhz5Pl
        /yD///8r////Tv///23///9Z////Bf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7E5sAcgBjAIIk
        wAuCKtIqgi/cXIU245eFNuNocxTVAXsq1wAAzv8AAEp1BgBypSEHh7tQFZjMiyiq3MM9uujrQpCr/YyT
        lf9zjJTsTXmHOGupvQD///8A////B////wn///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABeCPIAWgfzAFoH8wBdCPMAAAAAAAAAAAAAAAAAAAAAAAAYNwAAAAAAAFmJDAp+
        sC4VibhhOltpsWBeXf5jYmLNR0ZGQwAAAAAaGhkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADIxMQAxMTAzSkpJ3nBwb/9ycXHhRUREMEtKSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABgYGAAAAAAIeHh42QkFBtHBwb/x4d3a0VlZVI2NjYgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQjIwAUFBMSNzc2dF9eXcBnZmU6a2ppAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUEBAABAQADISAgDlZT
        UgJRT04AAAAAAAAAAAAAAAAA///////////////////////////8H///+AP///AAf//wAB//4AAH/+AA
        Af/gAAB/4AAAH8AAAA/AAAAHwAAAB8AAADfAAAA/wAAAH8AAAF/AAAAfwAAAP+AAAD/gAAB/8AAAv/wO
        AP//38D////8f////j////8f////3/////8=
</value>
  </data>
</root>